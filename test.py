#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ VIN-–ø–∞—Ä—Å–µ—Ä–∞
"""

import json
from vin_parser import parse_gibdd_response, search_reviews_enhanced, search_board_journals, VINParser

def test_parse_gibdd_response():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ì–ò–ë–î–î"""
    print("üß™ –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ì–ò–ë–î–î...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open("gibdd_response.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
        vehicle_info = parse_gibdd_response(data)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é data, –∞ –Ω–µ data["response"]
        
        if vehicle_info:
            print(f"  ‚úì VIN: {vehicle_info.vin}")
            print(f"  ‚úì –ú–∞—Ä–∫–∞: {vehicle_info.brand}")
            print(f"  ‚úì –ú–æ–¥–µ–ª—å: {vehicle_info.model}")
            print(f"  ‚úì –ì–æ–¥: {vehicle_info.year}")
            print(f"  ‚úì –¶–≤–µ—Ç: {vehicle_info.color}")
            print(f"  ‚úì –î–≤–∏–≥–∞—Ç–µ–ª—å: {vehicle_info.engine_volume} / {vehicle_info.power_hp} –ª.—Å.")
            print(f"  ‚úì –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–Ω–∏—è: {len(vehicle_info.ownership_history)} –∑–∞–ø–∏—Å–µ–π")
            return vehicle_info
        else:
            print("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return None
            
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞: {e}")
        return None

def test_search_functions(vehicle_info):
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ –±–æ—Ä—Ç–∂—É—Ä–Ω–∞–ª–æ–≤"""
    if not vehicle_info:
        print("üß™ –¢–µ—Å—Ç 2 –∏ 3: –ü—Ä–æ–ø—É—â–µ–Ω—ã - –Ω–µ—Ç vehicle_info")
        return
    
    print("\nüß™ –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤...")
    try:
        reviews_data = {
            "vehicle_info": vehicle_info.to_dict(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            "max_reviews": 5
        }
        reviews = search_reviews_enhanced(reviews_data)
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
        
        for review in reviews[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
            print(f"    ‚Ä¢ {review.get('source')}: {review.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
    
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
    
    print("\nüß™ –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –±–æ—Ä—Ç–∂—É—Ä–Ω–∞–ª–æ–≤...")
    try:
        bj_data = {
            "vehicle_info": vehicle_info.to_dict(),  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
            "max_entries": 5
        }
        journals = search_board_journals(bj_data)
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ –±–æ—Ä—Ç–∂—É—Ä–Ω–∞–ª–æ–≤: {len(journals)}")
        
        for journal in journals[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
            print(f"    ‚Ä¢ {journal.get('source')}: {journal.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
    
    except Exception as e:
        print(f"  ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–æ—Ä—Ç–∂—É—Ä–Ω–∞–ª–æ–≤: {e}")

def test_full_parser():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–∞—Ä—Å–µ—Ä–∞...")
    
    try:
        parser = VINParser()
        vin = "JMBXTGF2WDZ013380"
        
        result = parser.parse_by_vin(
            vin=vin,
            search_reviews=True,
            get_additional=True,
            max_reviews=10,
            use_mock_data=True,
            include_board_journals=True
        )
        
        if result.get("error"):
            print(f"  ‚úó –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: {result['error']}")
            return False
        
        print(f"  ‚úì VIN –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result['vin']}")
        print(f"  ‚úì –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result['sources']}")
        print(f"  ‚úì –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {len(result['reviews'])}")
        
        summary = result.get("summary", {})
        if summary:
            print(f"  ‚úì –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {summary.get('full_name')}")
            print(f"  ‚úì –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {summary.get('owners_count')}")
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
        print("\n  üìÑ –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤...")
        try:
            html_file = parser.export_report(result, format="html")
            print(f"    ‚úì HTML –æ—Ç—á–µ—Ç: {html_file}")
        except Exception as e:
            print(f"    ‚úó –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ HTML: {e}")
        
        try:
            json_file = parser.export_report(result, format="json")
            print(f"    ‚úì JSON –æ—Ç—á–µ—Ç: {json_file}")
        except Exception as e:
            print(f"    ‚úó –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON: {e}")
        
        return True
        
    except Exception as e:
        print(f"  ‚úó –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_validation_functions():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    from vin_parser import validate_required_keys, validate_vehicle_info, VehicleInfo
    
    # –¢–µ—Å—Ç validate_required_keys
    try:
        data_good = {"vehicle_info": "test", "max_reviews": 10}
        validate_required_keys(data_good, ["vehicle_info"], "test_function")
        print("  ‚úì validate_required_keys - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print(f"  ‚úó validate_required_keys - –æ—à–∏–±–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: {e}")
    
    try:
        data_bad = {"max_reviews": 10}
        validate_required_keys(data_bad, ["vehicle_info"], "test_function")
        print("  ‚úó validate_required_keys - –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É")
    except ValueError:
        print("  ‚úì validate_required_keys - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏")
    except Exception as e:
        print(f"  ‚úó validate_required_keys - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç validate_vehicle_info
    vehicle_good = VehicleInfo(vin="TEST", brand="Toyota", model="Camry")
    if validate_vehicle_info(vehicle_good, "test_function"):
        print("  ‚úì validate_vehicle_info - –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç")
    else:
        print("  ‚úó validate_vehicle_info - –æ—à–∏–±–∫–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º")
    
    if not validate_vehicle_info(None, "test_function"):
        print("  ‚úì validate_vehicle_info - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ None")
    else:
        print("  ‚úó validate_vehicle_info - –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–µ—Ä–Ω—É—Ç—å False –¥–ª—è None")

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫...")
    
    parser = VINParser()
    
    # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ VIN
    result = parser.parse_by_vin("INVALID_VIN")
    if result.get("error"):
        print("  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π VIN")
    else:
        print("  ‚úó –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π VIN")
    
    # –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ì–ò–ë–î–î
    empty_gibdd_data = {"success": False}
    vehicle_info = parse_gibdd_response(empty_gibdd_data)
    if vehicle_info is None:
        print("  ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ì–ò–ë–î–î")
    else:
        print("  ‚úó –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ì–ò–ë–î–î")

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ VIN-–ø–∞—Ä—Å–µ—Ä–∞\n")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –ì–ò–ë–î–î
    vehicle_info = test_parse_gibdd_response()
    
    # –¢–µ—Å—Ç 2-3: –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –∏ –±–æ—Ä—Ç–∂—É—Ä–Ω–∞–ª–æ–≤
    test_search_functions(vehicle_info)
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    full_test_success = test_full_parser()
    
    # –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è
    test_validation_functions()
    
    # –¢–µ—Å—Ç 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    test_error_handling()
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    if full_test_success:
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")

if __name__ == "__main__":
    run_all_tests()
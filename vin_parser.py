"""
VIN-–ø–∞—Ä—Å–µ—Ä —Å API –ì–ò–ë–î–î –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –æ—Ç–∑—ã–≤–æ–≤
–ü–æ–ª—É—á–∞–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì–ò–ë–î–î –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –ø–æ –º–æ–¥–µ–ª–∏
"""

from botasaurus.browser import browser, Driver
from botasaurus.request import request, Request
from botasaurus.soupify import soupify
from botasaurus import bt
from botasaurus.cache import Cache
from typing import Dict, List, Optional, Tuple
import re
import time
import json
from datetime import datetime
from dataclasses import dataclass, asdict

# ==================== –ú–û–î–ï–õ–¨ –î–ê–ù–ù–´–• ====================

@dataclass
class VehicleInfo:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    vin: str
    brand: str = None
    model: str = None
    year: int = None
    engine_volume: str = None
    power_hp: str = None
    power_kwt: str = None
    color: str = None
    body_number: str = None
    engine_number: str = None
    category: str = None
    type_info: str = None
    pts_number: str = None
    pts_issue: str = None
    ownership_history: List[Dict] = None
    technical_specs: Dict = None
    reviews: List[Dict] = None


# ==================== –£–¢–ò–õ–ò–¢–´ ====================

def validate_required_keys(data: Dict, required_keys: List[str], func_name: str) -> None:
    """Validate that all required keys exist in the provided data dict.

    Args:
        data: Input dictionary passed to a browser-decorated function.
        required_keys: Keys that must be present in ``data``.
        func_name: Name of the function for clearer error messages.

    Raises:
        ValueError: If any of the required keys are missing.
    """
    missing = [key for key in required_keys if key not in data or data[key] is None]
    if missing:
        missing_keys = ", ".join(missing)
        raise ValueError(f"Missing required keys for {func_name}: {missing_keys}")

# ==================== API –ì–ò–ë–î–î ====================

@request(
    cache=True,
    max_retry=5
)
def get_gibdd_data(request: Request, vin: str, api_key: str = None) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –ì–ò–ë–î–î
    
    Args:
        vin: VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        api_key: API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    """
    
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π endpoint API
        # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        api_url = "https://api.your-service.ru/gibdd"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL
        
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
        
        if api_key:
            headers["Authorization"] = f"Bearer {api_key}"
        
        payload = {
            "vin": vin.upper(),
            "method": "gibdd"
        }
        
        response = request.post(
            api_url,
            json=payload,
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –ì–ò–ë–î–î: {e}")
        return None

def parse_gibdd_response(gibdd_data: Dict) -> VehicleInfo:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ì–ò–ë–î–î –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É VehicleInfo
    """
    
    if not gibdd_data or not gibdd_data.get('success'):
        return None
    
    response = gibdd_data.get('response', {})
    vehicle = response.get('vehicle', {})
    passport = response.get('vehiclePassport', {})
    ownership = response.get('ownershipPeriod', [])
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    full_model = vehicle.get('model', '')
    brand = None
    model = None
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ú–ò–¶–£–ë–ò–°–ò –ê–£–¢–õ–ï–ù–î–ï–† 2.0")
    model_parts = full_model.strip().split()
    if model_parts:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Ä–∫–∏ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–∏–¥
        brand_mapping = {
            '–ú–ò–¶–£–ë–ò–°–ò': 'Mitsubishi',
            '–ú–ò–¢–°–£–ë–ò–°–ò': 'Mitsubishi',
            '–¢–û–ô–û–¢–ê': 'Toyota',
            '–ù–ò–°–°–ê–ù': 'Nissan',
            '–ú–ê–ó–î–ê': 'Mazda',
            '–•–û–ù–î–ê': 'Honda',
            '–§–û–õ–¨–ö–°–í–ê–ì–ï–ù': 'Volkswagen',
            '–ë–ú–í': 'BMW',
            '–ú–ï–†–°–ï–î–ï–°': 'Mercedes-Benz',
            '–ê–£–î–ò': 'Audi',
            '–®–ö–û–î–ê': 'Skoda',
            '–†–ï–ù–û': 'Renault',
            '–ü–ï–ñ–û': 'Peugeot',
            '–°–ò–¢–†–û–ï–ù': 'Citroen',
            '–§–û–†–î': 'Ford',
            '–®–ï–í–†–û–õ–ï': 'Chevrolet',
            '–ö–ò–ê': 'Kia',
            '–•–ï–ù–î–ê–ô': 'Hyundai',
            '–•–£–ù–î–ê–ô': 'Hyundai',
            '–õ–ê–î–ê': 'Lada',
            '–í–ê–ó': 'VAZ'
        }
        
        brand_raw = model_parts[0].upper()
        brand = brand_mapping.get(brand_raw, model_parts[0].capitalize())
        
        # –ú–æ–¥–µ–ª—å - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫—Ä–æ–º–µ –º–∞—Ä–∫–∏ –∏ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        model_parts_clean = []
        for part in model_parts[1:]:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å–ª–∞ —Å —Ç–æ—á–∫–æ–π (–æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è)
            if not re.match(r'^\d+\.\d+$', part):
                model_parts_clean.append(part.capitalize())
        model = ' '.join(model_parts_clean) if model_parts_clean else model_parts[1] if len(model_parts) > 1 else None
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–ª–∞–¥–µ–Ω–∏—è
    ownership_history = []
    for period in ownership:
        ownership_entry = {
            'type': period.get('simplePersonTypeInfo', ''),
            'from': period.get('from', ''),
            'to': period.get('to', ''),
            'period': period.get('period', ''),
            'operation': period.get('lastOperationInfo', '')
        }
        ownership_history.append(ownership_entry)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç VehicleInfo
    vehicle_info = VehicleInfo(
        vin=vehicle.get('vin', ''),
        brand=brand,
        model=model,
        year=int(vehicle.get('year', 0)) if vehicle.get('year') else None,
        engine_volume=vehicle.get('engineVolume', ''),
        power_hp=vehicle.get('powerHp', ''),
        power_kwt=vehicle.get('powerKwt', ''),
        color=vehicle.get('color', ''),
        body_number=vehicle.get('bodyNumber', ''),
        engine_number=vehicle.get('engineNumber', ''),
        category=vehicle.get('category', ''),
        type_info=vehicle.get('typeinfo', ''),
        pts_number=passport.get('number', ''),
        pts_issue=passport.get('issue', ''),
        ownership_history=ownership_history,
        technical_specs={
            'engine_volume': vehicle.get('engineVolume', ''),
            'power_hp': vehicle.get('powerHp', ''),
            'power_kwt': vehicle.get('powerKwt', ''),
            'category': vehicle.get('category', ''),
            'type': vehicle.get('typeinfo', '')
        }
    )
    
    return vehicle_info

# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–• ====================

@browser(
    block_images=True,
    cache=True,
    reuse_driver=True,
    max_retry=3
)
def get_additional_info(driver: Driver, data: Dict) -> Dict:
    """Placeholder for fetching additional vehicle information.

    Currently no external sources are queried.
    """
    return {}

# ==================== –ü–û–ò–°–ö –û–¢–ó–´–í–û–í ====================

@browser(
    block_images=False,
    cache=True,
    reuse_driver=True,
    max_retry=3
)
def search_reviews_enhanced(driver: Driver, data: Dict) -> List[Dict]:

    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ì–ò–ë–î–î"""

    vehicle_info: VehicleInfo = data["vehicle_info"]
    max_reviews: int = data.get("max_reviews", 20)


    reviews = []

    if not vehicle_info.brand or not vehicle_info.model:
        print("  ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤")
        return reviews
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è URL
    brand_normalized = vehicle_info.brand.lower().replace(' ', '-').replace('_', '-')
    model_normalized = vehicle_info.model.lower().replace(' ', '-').replace('_', '-')
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–µ–Ω–¥–æ–≤
    brand_url_mapping = {
        'mitsubishi': 'mitsubishi',
        'volkswagen': 'volkswagen',
        'mercedes-benz': 'mercedes',
        'bmw': 'bmw',
        'toyota': 'toyota',
        'nissan': 'nissan',
        'mazda': 'mazda',
        'honda': 'honda',
        'hyundai': 'hyundai',
        'kia': 'kia',
        'ford': 'ford',
        'chevrolet': 'chevrolet',
        'lada': 'lada',
        'vaz': 'vaz'
    }
    
    brand_for_url = brand_url_mapping.get(brand_normalized, brand_normalized)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π
    model_url_mapping = {
        'outlander': 'outlander',
        'asx': 'asx',
        'pajero': 'pajero',
        'lancer': 'lancer',
        'eclipse cross': 'eclipse-cross',
        'l200': 'l200'
    }
    
    model_for_url = model_url_mapping.get(model_normalized, model_normalized)
    
    print(f"\nüîç –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {vehicle_info.brand} {vehicle_info.model} {vehicle_info.year}")
    
    # === DROM.RU ===
    try:
        print("  üìã –ü–æ–∏—Å–∫ –Ω–∞ Drom.ru...")
        drom_url = f"https://www.drom.ru/reviews/{brand_for_url}/{model_for_url}/"
        
        driver.google_get(drom_url, bypass_cloudflare=True)
        driver.sleep(2)
        
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
        if driver.select('.error-page'):
            # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫
            search_url = f"https://www.drom.ru/reviews/search/?text={vehicle_info.brand}+{vehicle_info.model}"
            driver.get_via_this_page(search_url)
            driver.sleep(2)
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if vehicle_info.year:
            year_links = driver.select_all(f'a[href*="{vehicle_info.year}"]')
            if year_links:
                year_links[0].click()
                driver.sleep(2)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–æ–≤
        review_cards = driver.select_all('.css-1ksh4lf')[:max_reviews//2]
        
        for card in review_cards:
            review_data = {
                "source": "drom.ru",
                "brand": vehicle_info.brand,
                "model": vehicle_info.model,
                "year": vehicle_info.year,
                "vin_checked": True
            }
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_elem = card.select('h3')
            if title_elem:
                review_data['title'] = title_elem.get_text(strip=True)
            
            # –°—Å—ã–ª–∫–∞
            link_elem = card.select('a')
            if link_elem:
                href = link_elem.get_attribute('href')
                if href and not href.startswith('http'):
                    href = f"https://www.drom.ru{href}"
                review_data['url'] = href
            
            # –†–µ–π—Ç–∏–Ω–≥
            rating_elem = card.select('.css-kxziuu')
            if rating_elem:
                review_data['rating'] = rating_elem.get_text(strip=True)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ –≤ –æ—Ç–∑—ã–≤–µ
            specs_elem = card.select('.css-1x4jntm')
            if specs_elem:
                specs_text = specs_elem.get_text(strip=True)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
                if vehicle_info.engine_volume:
                    engine_vol_clean = vehicle_info.engine_volume.replace('.0', '').replace(',', '.')
                    if engine_vol_clean in specs_text:
                        review_data['engine_match'] = True
            
            # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            desc_elem = card.select('.css-1wdvlz0')
            if desc_elem:
                review_data['preview'] = desc_elem.get_text(strip=True)[:200]
            
            reviews.append(review_data)
        
        print(f"    ‚úì –ù–∞–π–¥–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ Drom.ru")
        
    except Exception as e:
        print(f"    ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Drom.ru: {e}")
    
    # === DRIVE2.RU ===
    try:
        print("  üöó –ü–æ–∏—Å–∫ –Ω–∞ Drive2.ru...")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ URL –¥–ª—è Drive2
        drive2_brand_mapping = {
            'mitsubishi': 'mitsubishi',
            'volkswagen': 'volkswagen',
            'mercedes-benz': 'mercedes-benz',
            'toyota': 'toyota',
            'nissan': 'nissan',
            'mazda': 'mazda',
            'honda': 'honda'
        }
        
        drive2_brand = drive2_brand_mapping.get(brand_normalized, brand_for_url)
        drive2_url = f"https://www.drive2.ru/experience/{drive2_brand}/{model_for_url}/"
        
        driver.get_via_this_page(drive2_url)
        driver.sleep(2)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫
        if driver.select('.c-error'):
            search_url = f"https://www.drive2.ru/search/?q={vehicle_info.brand}+{vehicle_info.model}+{vehicle_info.year}"
            driver.get_via_this_page(search_url)
            driver.sleep(2)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        drive2_cards = driver.select_all('.c-car-card')[:max_reviews//2]
        
        for card in drive2_cards:
            review_data = {
                "source": "drive2.ru",
                "brand": vehicle_info.brand,
                "model": vehicle_info.model,
                "year": vehicle_info.year,
                "vin_checked": True
            }
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫–∞
            title_elem = card.select('.c-car-card__caption a')
            if title_elem:
                review_data['title'] = title_elem.get_text(strip=True)
                href = title_elem.get_attribute('href')
                if href and not href.startswith('http'):
                    href = f"https://www.drive2.ru{href}"
                review_data['url'] = href
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ
            info_elem = card.select('.c-car-card__info')
            if info_elem:
                info_text = info_elem.get_text(strip=True)
                review_data['car_info'] = info_text
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥
                if vehicle_info.year and str(vehicle_info.year) in info_text:
                    review_data['year_match'] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—å
                if vehicle_info.engine_volume:
                    engine_vol_clean = vehicle_info.engine_volume.replace('.0', '').replace(',', '.')
                    if engine_vol_clean in info_text:
                        review_data['engine_match'] = True
            
            # –ê–≤—Ç–æ—Ä
            author_elem = card.select('.c-username__link')
            if author_elem:
                review_data['author'] = author_elem.get_text(strip=True)
            
            # –ü—Ä–æ–±–µ–≥
            mileage_elem = card.select('.c-car-card__param_mileage')
            if mileage_elem:
                review_data['mileage'] = mileage_elem.get_text(strip=True)
            
            reviews.append(review_data)
        
        print(f"    ‚úì –ù–∞–π–¥–µ–Ω–æ {len([r for r in reviews if r['source'] == 'drive2.ru'])} –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ Drive2.ru")
        
    except Exception as e:
        print(f"    ‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ Drive2.ru: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–∑—ã–≤–∞–º —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –≥–æ–¥–æ–º –∏ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–º
    for review in reviews:
        relevance_score = 0
        if review.get('year_match'):
            relevance_score += 2
        if review.get('engine_match'):
            relevance_score += 1
        review['relevance_score'] = relevance_score
    
    reviews.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
    
    return reviews[:max_reviews]

# ==================== –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° VIN-–ü–ê–†–°–ï–†–ê ====================

class VINParser:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ VIN —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –ì–ò–ë–î–î"""
    
    def __init__(self, api_key: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –ì–ò–ë–î–î
        """
        self.api_key = api_key
    
    @staticmethod
    def validate_vin(vin: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ VIN-–∫–æ–¥–∞"""
        vin_pattern = re.compile(r'^[A-HJ-NPR-Z0-9]{17}$')
        return bool(vin_pattern.match(vin.upper()))
    
    def parse_by_vin(
        self,
        vin: str,
        search_reviews: bool = True,
        max_reviews: int = 20,
        use_mock_data: bool = False
    ) -> Dict:
        """
        –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ VIN
        
        Args:
            vin: VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            search_reviews: –ò—Å–∫–∞—Ç—å –ª–∏ –æ—Ç–∑—ã–≤—ã
            max_reviews: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤
            use_mock_data: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        """
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è VIN
        vin = vin.upper().strip()
        
        if not self.validate_vin(vin):
            return {
                "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç VIN-–∫–æ–¥–∞",
                "vin": vin
            }
        
        print(f"\n{'='*70}")
        print(f"üîé –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó VIN: {vin}")
        print(f"{'='*70}")
        
        result = {
            "vin": vin,
            "parsed_at": datetime.now().isoformat(),
            "sources": [],
            "gibdd_data": None,
            "vehicle_info": None,
            "additional_info": {},
            "reviews": [],
            "summary": {}
        }
        
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ì–ò–ë–î–î
        print("\nüìä –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ì–ò–ë–î–î...")
        
        if use_mock_data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            gibdd_response = {
                "status": 200,
                "response": {
                    "status": 200,
                    "found": True,
                    "vehicle": {
                        "vin": vin,
                        "bodyNumber": vin,
                        "engineNumber": "9459",
                        "model": "–ú–ò–¶–£–ë–ò–°–ò –ê–£–¢–õ–ï–ù–î–ï–† 2.0",
                        "color": "–ë–µ–ª—ã–π",
                        "year": "2013",
                        "engineVolume": "1998.0",
                        "powerHp": "146.0",
                        "powerKwt": "107.4",
                        "category": "–í",
                        "type": "21",
                        "typeinfo": "–õ–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª"
                    },
                    "vehiclePassport": {
                        "number": "78–£–¢410971",
                        "issue": "–¢–ê–ú–û–ñ–ù–Ø: 10009194"
                    },
                    "ownershipPeriod": [
                        {
                            "lastOperation": "07",
                            "lastOperationInfo": "–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                            "simplePersonType": "Natural",
                            "simplePersonTypeInfo": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
                            "from": "19.10.2013",
                            "to": "2024-07-20",
                            "period": "10 –ª–µ—Ç 9 –º–µ—Å—è—Ü–µ–≤"
                        },
                        {
                            "lastOperation": "02",
                            "lastOperationInfo": "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                            "simplePersonType": "Natural",
                            "simplePersonTypeInfo": "–§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ",
                            "from": "03.08.2024",
                            "to": "null",
                            "period": "—Ç–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü"
                        }
                    ]
                },
                "success": True
            }
        else:
            gibdd_response = get_gibdd_data(vin, self.api_key)
        
        if gibdd_response and gibdd_response.get('success'):
            result["gibdd_data"] = gibdd_response.get('response')
            result["sources"].append("–ì–ò–ë–î–î")
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ì–ò–ë–î–î
            vehicle_info = parse_gibdd_response(gibdd_response)
            result["vehicle_info"] = vehicle_info
            
            print(f"  ‚úì –ü–æ–ª—É—á–µ–Ω—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print(f"    ‚Ä¢ –ú–∞—Ä–∫–∞: {vehicle_info.brand}")
            print(f"    ‚Ä¢ –ú–æ–¥–µ–ª—å: {vehicle_info.model}")
            print(f"    ‚Ä¢ –ì–æ–¥: {vehicle_info.year}")
            print(f"    ‚Ä¢ –¶–≤–µ—Ç: {vehicle_info.color}")
            print(f"    ‚Ä¢ –î–≤–∏–≥–∞—Ç–µ–ª—å: {vehicle_info.engine_volume} —Å–º¬≥, {vehicle_info.power_hp} –ª.—Å.")
            print(f"    ‚Ä¢ –ü–¢–°: {vehicle_info.pts_number}")
            print(f"    ‚Ä¢ –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {len(vehicle_info.ownership_history)}")
        else:
            print("  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ì–ò–ë–î–î")
            return result
        
        # 2. –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤
        if search_reviews and vehicle_info:
            print("\nüìù –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤...")

            reviews_data = {
                "vehicle_info": vehicle_info,
                "max_reviews": max_reviews,
            }
            validate_required_keys(reviews_data, ["vehicle_info"], "search_reviews_enhanced")
            reviews = search_reviews_enhanced(reviews_data)

            result["reviews"] = reviews
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º
            drom_count = len([r for r in reviews if r['source'] == 'drom.ru'])
            drive2_count = len([r for r in reviews if r['source'] == 'drive2.ru'])
            
            print(f"\n  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:")
            print(f"    ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(reviews)}")
            print(f"    ‚Ä¢ Drom.ru: {drom_count}")
            print(f"    ‚Ä¢ Drive2.ru: {drive2_count}")
            
            # –û—Ç–∑—ã–≤—ã —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
            exact_matches = [r for r in reviews if r.get('year_match') or r.get('engine_match')]
            if exact_matches:
                print(f"    ‚Ä¢ –° —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(exact_matches)}")
        
        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        if vehicle_info:
            result["summary"] = {
                "vin": vin,
                "full_name": f"{vehicle_info.brand} {vehicle_info.model} {vehicle_info.year}",
                "brand": vehicle_info.brand,
                "model": vehicle_info.model,
                "year": vehicle_info.year,
                "color": vehicle_info.color,
                "engine": f"{vehicle_info.engine_volume} —Å–º¬≥ / {vehicle_info.power_hp} –ª.—Å.",
                "body_type": vehicle_info.type_info,
                "pts": vehicle_info.pts_number,
                "owners_count": len(vehicle_info.ownership_history),
                "current_owner_since": vehicle_info.ownership_history[-1]['from'] if vehicle_info.ownership_history else None,
                "reviews_found": len(result["reviews"]),
                "data_sources": result["sources"],
                "additional_info": {
                    "accidents": result["additional_info"].get("accidents", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    "mileage": result["additional_info"].get("mileage", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    "restrictions": result["additional_info"].get("restrictions", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                }
            }
        
        print(f"\n{'='*70}")
        print(f"‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù")
        print(f"{'='*70}")
        
        return result
    
    def export_report(self, result: Dict, format: str = "html") -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
            format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (html, excel, json, pdf)
        """
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"vin_report_{result['vin']}_{timestamp}"
        
        if format == "html":
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML –æ—Ç—á–µ—Ç
            html_content = self._generate_html_report(result)
            bt.write_html(html_content, filename)
            return f"{filename}.html"
            
        elif format == "excel":
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            main_data = [{
                "VIN": result["vin"],
                "–ú–∞—Ä–∫–∞": result["summary"]["brand"],
                "–ú–æ–¥–µ–ª—å": result["summary"]["model"],
                "–ì–æ–¥": result["summary"]["year"],
                "–¶–≤–µ—Ç": result["summary"]["color"],
                "–î–≤–∏–≥–∞—Ç–µ–ª—å": result["summary"]["engine"],
                "–ö—É–∑–æ–≤": result["summary"]["body_type"],
                "–ü–¢–°": result["summary"]["pts"],
                "–í–ª–∞–¥–µ–ª—å—Ü–µ–≤": result["summary"]["owners_count"],
                "–¢–µ–∫—É—â–∏–π –≤–ª–∞–¥–µ–ª–µ—Ü —Å": result["summary"]["current_owner_since"],
                "–î–¢–ü": result["summary"]["additional_info"]["accidents"],
                "–ü—Ä–æ–±–µ–≥": result["summary"]["additional_info"]["mileage"],
                "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è": result["summary"]["additional_info"]["restrictions"]
            }]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            bt.write_excel(main_data, filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            if result.get("reviews"):
                reviews_filename = f"reviews_{result['vin']}_{timestamp}"
                bt.write_excel(result["reviews"], reviews_filename)
            
            return f"{filename}.xlsx"
            
        elif format == "json":
            bt.write_json(result, filename)
            return f"{filename}.json"
        
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format}")
    
    def _generate_html_report(self, result: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞"""
        
        summary = result.get("summary", {})
        vehicle_info = result.get("vehicle_info")
        reviews = result.get("reviews", [])
        
        html = f"""
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>–û—Ç—á–µ—Ç –ø–æ VIN: {result['vin']}</title>
            <style>
                body {{
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 20px;
                    background: #f5f5f5;
                }}
                .header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 10px;
                    margin-bottom: 30px;
                }}
                .section {{
                    background: white;
                    border-radius: 10px;
                    padding: 25px;
                    margin-bottom: 20px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }}
                .info-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                }}
                .info-item {{
                    padding: 15px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid #667eea;
                }}
                .info-label {{
                    font-size: 12px;
                    color: #666;
                    text-transform: uppercase;
                    margin-bottom: 5px;
                }}
                .info-value {{
                    font-size: 18px;
                    font-weight: 600;
                    color: #333;
                }}
                .ownership-timeline {{
                    position: relative;
                    padding-left: 30px;
                }}
                .ownership-item {{
                    position: relative;
                    padding: 15px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    margin-bottom: 15px;
                }}
                .ownership-item:before {{
                    content: '';
                    position: absolute;
                    left: -22px;
                    top: 20px;
                    width: 12px;
                    height: 12px;
                    border-radius: 50%;
                    background: #667eea;
                }}
                .review-card {{
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    margin-bottom: 15px;
                    transition: transform 0.2s;
                }}
                .review-card:hover {{
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                }}
                .badge {{
                    display: inline-block;
                    padding: 4px 10px;
                    border-radius: 4px;
                    font-size: 12px;
                    font-weight: 600;
                    margin-right: 5px;
                }}
                .badge-success {{
                    background: #d4edda;
                    color: #155724;
                }}
                .badge-warning {{
                    background: #fff3cd;
                    color: #856404;
                }}
                .badge-info {{
                    background: #d1ecf1;
                    color: #0c5460;
                }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>{summary.get('full_name', '–ê–≤—Ç–æ–º–æ–±–∏–ª—å')}</h1>
                <p>VIN: {result['vin']}</p>
                <p>–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}</p>
            </div>
            
            <div class="section">
                <h2>üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å</div>
                        <div class="info-value">{summary.get('brand', '–ù/–î')} {summary.get('model', '')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞</div>
                        <div class="info-value">{summary.get('year', '–ù/–î')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–¶–≤–µ—Ç</div>
                        <div class="info-value">{summary.get('color', '–ù/–î')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–î–≤–∏–≥–∞—Ç–µ–ª—å</div>
                        <div class="info-value">{summary.get('engine', '–ù/–î')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–¢–∏–ø –∫—É–∑–æ–≤–∞</div>
                        <div class="info-value">{summary.get('body_type', '–ù/–î')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–ü–¢–°</div>
                        <div class="info-value">{summary.get('pts', '–ù/–î')}</div>
                    </div>
                </div>
            </div>
            
            <div class="section">
                <h2>üöó –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
                <div class="info-grid">
                    <div class="info-item">
                        <div class="info-label">–î–¢–ü</div>
                        <div class="info-value">{summary.get('additional_info', {}).get('accidents', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–ü—Ä–æ–±–µ–≥</div>
                        <div class="info-value">{summary.get('additional_info', {}).get('mileage', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</div>
                        <div class="info-value">{summary.get('additional_info', {}).get('restrictions', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}</div>
                    </div>
                </div>
            </div>
        """
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–Ω–∏—è
        if vehicle_info and vehicle_info.ownership_history:
            html += """
            <div class="section">
                <h2>üë• –ò—Å—Ç–æ—Ä–∏—è –≤–ª–∞–¥–µ–Ω–∏—è</h2>
                <div class="ownership-timeline">
            """
            
            for i, owner in enumerate(vehicle_info.ownership_history, 1):
                current = owner.get('to') == 'null' or not owner.get('to')
                html += f"""
                    <div class="ownership-item">
                        <h4>–í–ª–∞–¥–µ–ª–µ—Ü #{i} {' (–¢–µ–∫—É—â–∏–π)' if current else ''}</h4>
                        <p><strong>–¢–∏–ø:</strong> {owner.get('type', '–ù/–î')}</p>
                        <p><strong>–ü–µ—Ä–∏–æ–¥:</strong> —Å {owner.get('from', '–ù/–î')} 
                           {f"–ø–æ {owner.get('to')}" if not current else '–ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è'}</p>
                        <p><strong>–°—Ä–æ–∫ –≤–ª–∞–¥–µ–Ω–∏—è:</strong> {owner.get('period', '–ù/–î')}</p>
                        <p><strong>–û–ø–µ—Ä–∞—Ü–∏—è:</strong> {owner.get('operation', '–ù/–î')}</p>
                    </div>
                """
            
            html += """
                </div>
            </div>
            """
        
        # –û—Ç–∑—ã–≤—ã
        if reviews:
            html += f"""
            <div class="section">
                <h2>üìù –û—Ç–∑—ã–≤—ã –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ ({len(reviews)} –Ω–∞–π–¥–µ–Ω–æ)</h2>
            """
            
            for review in reviews[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—Ç–∑—ã–≤–æ–≤
                badges = []
                if review.get('year_match'):
                    badges.append('<span class="badge badge-success">–ì–æ–¥ —Å–æ–≤–ø–∞–¥–∞–µ—Ç</span>')
                if review.get('engine_match'):
                    badges.append('<span class="badge badge-info">–î–≤–∏–≥–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç</span>')
                
                source_badge = f'<span class="badge badge-warning">{review["source"]}</span>'
                
                html += f"""
                    <div class="review-card">
                        <div style="margin-bottom: 10px;">
                            {source_badge}
                            {''.join(badges)}
                        </div>
                        <h4>{review.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</h4>
                        <p><strong>–†–µ–π—Ç–∏–Ω–≥:</strong> {review.get('rating', '–ù/–î')}</p>
                        {f'<p><strong>–ê–≤—Ç–æ—Ä:</strong> {review.get("author")}</p>' if review.get("author") else ''}
                        {f'<p><strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ:</strong> {review.get("car_info")}</p>' if review.get("car_info") else ''}
                        {f'<p>{review.get("preview")}</p>' if review.get("preview") else ''}
                        <a href="{review.get('url', '#')}" target="_blank">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ‚Üí</a>
                    </div>
                """
            
            html += """
            </div>
            """
        
        html += """
        </body>
        </html>
        """
        
        return html

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–î–û–ë–ù–û–ô –†–ê–ë–û–¢–´ ====================

def parse_vin_simple(vin: str, api_key: str = None) -> Dict:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ VIN
    
    Args:
        vin: VIN-–∫–æ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        api_key: API –∫–ª—é—á –¥–ª—è –ì–ò–ë–î–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    """
    parser = VINParser(api_key=api_key)
    return parser.parse_by_vin(vin, use_mock_data=True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

def parse_multiple_vins(vin_list: List[str], api_key: str = None, output_format: str = "excel") -> List[Dict]:
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö VIN-–∫–æ–¥–æ–≤
    
    Args:
        vin_list: –°–ø–∏—Å–æ–∫ VIN-–∫–æ–¥–æ–≤
        api_key: API –∫–ª—é—á –¥–ª—è –ì–ò–ë–î–î
        output_format: –§–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    parser = VINParser(api_key=api_key)
    results = []
    total = len(vin_list)
    
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {total} VIN-–∫–æ–¥–æ–≤...")
    
    for idx, vin in enumerate(vin_list, 1):
        print(f"\n[{idx}/{total}] –û–±—Ä–∞–±–æ—Ç–∫–∞ VIN: {vin}")
        result = parser.parse_by_vin(vin, use_mock_data=True)
        results.append(result)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞
        if not result.get("error"):
            parser.export_report(result, format="html")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if idx < total:
            time.sleep(2)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    if output_format == "excel":
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
        export_data = []
        for result in results:
            if not result.get("error"):
                summary = result.get("summary", {})
                export_data.append({
                    "VIN": result["vin"],
                    "–ê–≤—Ç–æ–º–æ–±–∏–ª—å": summary.get("full_name", ""),
                    "–ì–æ–¥": summary.get("year", ""),
                    "–¶–≤–µ—Ç": summary.get("color", ""),
                    "–î–≤–∏–≥–∞—Ç–µ–ª—å": summary.get("engine", ""),
                    "–í–ª–∞–¥–µ–ª—å—Ü–µ–≤": summary.get("owners_count", 0),
                    "–û—Ç–∑—ã–≤–æ–≤ –Ω–∞–π–¥–µ–Ω–æ": summary.get("reviews_found", 0),
                    "–î–¢–ü": summary.get("additional_info", {}).get("accidents", ""),
                    "–ü—Ä–æ–±–µ–≥": summary.get("additional_info", {}).get("mileage", "")
                })
        
        filename = f"vin_batch_results_{timestamp}"
        bt.write_excel(export_data, filename)
        print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}.xlsx")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"  –í—Å–µ–≥–æ VIN –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total}")
    print(f"  –£—Å–ø–µ—à–Ω–æ: {len([r for r in results if not r.get('error')])}")
    print(f"  –° –æ—à–∏–±–∫–∞–º–∏: {len([r for r in results if r.get('error')])}")
    
    total_reviews = sum(r.get('summary', {}).get('reviews_found', 0) for r in results if not r.get('error'))
    print(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}")
    
    return results

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VIN-–ø–∞—Ä—Å–µ—Ä–æ–º"""
    
    print("\n" + "="*70)
    print("üöó VIN-–ü–ê–†–°–ï–† –° –î–ê–ù–ù–´–ú–ò –ì–ò–ë–î–î –ò –û–¢–ó–´–í–ê–ú–ò")
    print("="*70)
    print("\n–ü–∞—Ä—Å–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:")
    print("  ‚úì –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ì–ò–ë–î–î")
    print("  ‚úì –û—Ç–∑—ã–≤—ã —Å Drom.ru –∏ Drive2.ru")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_vin = "JMBXTGF2WDZ013380"
    
    print(f"\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å VIN: {test_vin}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = VINParser()
    
    # –ü–∞—Ä—Å–∏–º VIN
    result = parser.parse_by_vin(
        vin=test_vin,
        search_reviews=True,
        max_reviews=20,
        use_mock_data=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    if not result.get("error"):
        html_file = parser.export_report(result, format="html")
        excel_file = parser.export_report(result, format="excel")
        json_file = parser.export_report(result, format="json")
        
        print(f"\nüìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"  ‚Ä¢ HTML: {html_file}")
        print(f"  ‚Ä¢ Excel: {excel_file}")
        print(f"  ‚Ä¢ JSON: {json_file}")
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")

# ==================== –ó–ê–ü–£–°–ö ====================

if __name__ == "__main__":
    main()
                